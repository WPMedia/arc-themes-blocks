@use 'sass:map';
@use 'sass:list';

//
// Used to set the nest components CSS Variable overrides at the block level
// When a block has components nested within, and those components has
// different styles to the default component styles they are overridden
// use CSS Variables
//
// --c-date-font-weight: 900
//
@mixin block-components($blockName) {
  @if list.length(map.get($tokens, 'desktop', 'block', $blockName, 'components')) == 0 {
    @warn 'Block "#{$blockName}" has components map with no values';
  }
  @each $name, $value in map.get($tokens, 'desktop', 'block', $blockName, 'components') {
    @if list.length($value) == 0 {
      @warn 'Block "#{$blockName}" has component "#{$name}" with no values';
    }
    @if type-of($value) == map {
      @each $a, $b in $value {
        --c-#{$name}-#{$a}: #{$b};
      }
    }
  }
}

//
// Ouput all the blocks properties in the format
// CSSProperty: CSSVariable
// background-color: var(--b-list-background-color);
//
@mixin block-properties($blockName, $others...) {
  @each $name, $value in map.get($tokens, 'desktop', 'block', $blockName, $others...) {
    @if type-of($value) != map {
      // #{$name}: #{$value};
      #{$name}: block-var($blockName, $name);
    }
  }
}

//
// Output all the component values in format
// CSSProperty: CSSVariable
// background-color: var(--c-overline-background-color);
//
@mixin component-properties($component) {
  @if map.has-key($tokens, 'desktop', 'components', $component) == false {
    @warn 'Properties for component "#{$component}" not found.';
  }
  @each $name, $value in map.get($tokens, 'desktop', 'components', $component) {
    #{$name}: component-var($component, $name);
  }
}

//
// Return the CSS Variable for a component item
//
@function component-var($component, $item) {
  @return var(--c-#{$component}-#{$item});
}

//
// Return the CSS Variable for a block item
//
@function block-var($block, $item) {
  @return var(--b-#{$block}-#{$item});
}

//
// Setters
//
@mixin set-alias($items) {
  $default-alias: $alias;
  $alias: map.deep-merge($default-alias, $items) !global;
}

@mixin set-components($items) {
  $default-components: $components;
  $components: map.deep-merge($default-components, $items) !global;
}
